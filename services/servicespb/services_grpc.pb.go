// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: services.proto

package servicespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientProtoService_GetClientById_FullMethodName = "/services.ClientProtoService/GetClientById"
	ClientProtoService_IsClientExist_FullMethodName = "/services.ClientProtoService/IsClientExist"
)

// ClientProtoServiceClient is the client API for ClientProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientProtoServiceClient interface {
	GetClientById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	IsClientExist(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*IsExistResponse, error)
}

type clientProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientProtoServiceClient(cc grpc.ClientConnInterface) ClientProtoServiceClient {
	return &clientProtoServiceClient{cc}
}

func (c *clientProtoServiceClient) GetClientById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, ClientProtoService_GetClientById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientProtoServiceClient) IsClientExist(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*IsExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsExistResponse)
	err := c.cc.Invoke(ctx, ClientProtoService_IsClientExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientProtoServiceServer is the server API for ClientProtoService service.
// All implementations must embed UnimplementedClientProtoServiceServer
// for forward compatibility.
type ClientProtoServiceServer interface {
	GetClientById(context.Context, *IdRequest) (*ClientResponse, error)
	IsClientExist(context.Context, *EmailRequest) (*IsExistResponse, error)
	mustEmbedUnimplementedClientProtoServiceServer()
}

// UnimplementedClientProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientProtoServiceServer struct{}

func (UnimplementedClientProtoServiceServer) GetClientById(context.Context, *IdRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientById not implemented")
}
func (UnimplementedClientProtoServiceServer) IsClientExist(context.Context, *EmailRequest) (*IsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsClientExist not implemented")
}
func (UnimplementedClientProtoServiceServer) mustEmbedUnimplementedClientProtoServiceServer() {}
func (UnimplementedClientProtoServiceServer) testEmbeddedByValue()                            {}

// UnsafeClientProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientProtoServiceServer will
// result in compilation errors.
type UnsafeClientProtoServiceServer interface {
	mustEmbedUnimplementedClientProtoServiceServer()
}

func RegisterClientProtoServiceServer(s grpc.ServiceRegistrar, srv ClientProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientProtoService_ServiceDesc, srv)
}

func _ClientProtoService_GetClientById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientProtoServiceServer).GetClientById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientProtoService_GetClientById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientProtoServiceServer).GetClientById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientProtoService_IsClientExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientProtoServiceServer).IsClientExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientProtoService_IsClientExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientProtoServiceServer).IsClientExist(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientProtoService_ServiceDesc is the grpc.ServiceDesc for ClientProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ClientProtoService",
	HandlerType: (*ClientProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientById",
			Handler:    _ClientProtoService_GetClientById_Handler,
		},
		{
			MethodName: "IsClientExist",
			Handler:    _ClientProtoService_IsClientExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

const (
	MovieProtoService_GetMovieById_FullMethodName = "/services.MovieProtoService/GetMovieById"
	MovieProtoService_IsMovieExist_FullMethodName = "/services.MovieProtoService/IsMovieExist"
)

// MovieProtoServiceClient is the client API for MovieProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieProtoServiceClient interface {
	GetMovieById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	IsMovieExist(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IsExistResponse, error)
}

type movieProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieProtoServiceClient(cc grpc.ClientConnInterface) MovieProtoServiceClient {
	return &movieProtoServiceClient{cc}
}

func (c *movieProtoServiceClient) GetMovieById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieProtoService_GetMovieById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieProtoServiceClient) IsMovieExist(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IsExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsExistResponse)
	err := c.cc.Invoke(ctx, MovieProtoService_IsMovieExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieProtoServiceServer is the server API for MovieProtoService service.
// All implementations must embed UnimplementedMovieProtoServiceServer
// for forward compatibility.
type MovieProtoServiceServer interface {
	GetMovieById(context.Context, *IdRequest) (*MovieResponse, error)
	IsMovieExist(context.Context, *IdRequest) (*IsExistResponse, error)
	mustEmbedUnimplementedMovieProtoServiceServer()
}

// UnimplementedMovieProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieProtoServiceServer struct{}

func (UnimplementedMovieProtoServiceServer) GetMovieById(context.Context, *IdRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieById not implemented")
}
func (UnimplementedMovieProtoServiceServer) IsMovieExist(context.Context, *IdRequest) (*IsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMovieExist not implemented")
}
func (UnimplementedMovieProtoServiceServer) mustEmbedUnimplementedMovieProtoServiceServer() {}
func (UnimplementedMovieProtoServiceServer) testEmbeddedByValue()                           {}

// UnsafeMovieProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieProtoServiceServer will
// result in compilation errors.
type UnsafeMovieProtoServiceServer interface {
	mustEmbedUnimplementedMovieProtoServiceServer()
}

func RegisterMovieProtoServiceServer(s grpc.ServiceRegistrar, srv MovieProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieProtoService_ServiceDesc, srv)
}

func _MovieProtoService_GetMovieById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieProtoServiceServer).GetMovieById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieProtoService_GetMovieById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieProtoServiceServer).GetMovieById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieProtoService_IsMovieExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieProtoServiceServer).IsMovieExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieProtoService_IsMovieExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieProtoServiceServer).IsMovieExist(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieProtoService_ServiceDesc is the grpc.ServiceDesc for MovieProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.MovieProtoService",
	HandlerType: (*MovieProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieById",
			Handler:    _MovieProtoService_GetMovieById_Handler,
		},
		{
			MethodName: "IsMovieExist",
			Handler:    _MovieProtoService_IsMovieExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
